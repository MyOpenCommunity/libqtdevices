//! Frame interpreter classes

#ifndef __FRAME_INTERPRETER_H__
#define __FRAME_INTERPRETER_H__

#include <qstring.h>
#include <qptrlist.h>
#include <qobject.h>
#include <stdlib.h>
#include "openclient.h"
#include "device.h"

class device_status;

//! Generic frame interpreter
class frame_interpreter : public QObject {
    Q_OBJECT
 protected:
    //! Who
    QString who;
    //! Where
    QString where;
    //! Pul status
    bool pul;
    //! Device's group
    int group;
 private:
    
 protected:
    //! Returns true when we belong to a given group
    bool belong_to_group(int gr);
    //! Returns true when frame is ours
    virtual bool is_frame_ours(openwebnet);
 public:
    //! Constructor
    frame_interpreter(QString who, QString where, bool pul, int group);
    //! Returns init message given device status
    virtual void get_init_message(device_status *, QString&);
    //! Set where
    void set_where(QString);
 signals:
    //! An event was generated by this frame
    void frame_event(device_status *);
 public slots:
    //! Receive a frame
    virtual void handle_frame_handler(char *, QPtrList<device_status> *);
};

//! Lights frame interpreter
class frame_interpreter_lights : public frame_interpreter {
    Q_OBJECT
 private:
    //! Set status, lights
    void set_status(device_status_light *ds, int s);
    //! Analyze a frame for a pl status
    void handle_frame(openwebnet, device_status_light *);
    //! Set status, dimmer
    void set_status(device_status_dimmer *ds, int s);
    //! Analyze a frame for a dimmer status
    void handle_frame(openwebnet, device_status_dimmer *);
    //! Set status, dimmer 100
    void set_status(device_status_dimmer100 *ds, int lev, int speed);
    //! Analyze a frame for a dimmer 100 status
    void handle_frame(openwebnet, device_status_dimmer100 *);
    //! Set status, new timed device
    void set_status(device_status_new_timed *ds, int hh, int mm, int ss, 
		    int on = -1);
    //! Analyze a frame for a ...
    void handle_frame(openwebnet, device_status_new_timed *);
 public:
    //! Constructor
    frame_interpreter_lights(QString, bool, int);
    //! Returns init message given device status
    void get_init_message(device_status *, QString&);
 public slots:
    //! Receive a frame
    void handle_frame_handler(char *, QPtrList<device_status> *);
};

//! Temperature probe frame interpreter
class frame_interpreter_temperature_probe : public frame_interpreter {
    Q_OBJECT
 private:
    //! Set status, lights
    void set_status(device_status_temperature_probe *ds, int s);
    //! Analyze a frame for a pl status
    void handle_frame(openwebnet, device_status_temperature_probe *);
 public:
    //! Constructor
    frame_interpreter_temperature_probe(QString, bool, int);
    //! Returns init message given device status
    void get_init_message(device_status *, QString&);
 public slots:
    //! Receive a frame
    void handle_frame_handler(char *, QPtrList<device_status> *);
};

//! Sound device frame interpreter
class frame_interpreter_sound_device : public frame_interpreter {
    Q_OBJECT
 private:
    //! Set status, lights
    void set_status(device_status_amplifier *ds, int s);
    //! Analyze a frame for a pl status
    void handle_frame(openwebnet, device_status_amplifier *);
 public:
    //! Constructor
    frame_interpreter_sound_device(QString, bool, int);
    //! Returns init message given device status
    void get_init_message(device_status *, QString&);
 public slots:
    //! Receive a frame
    void handle_frame_handler(char *, QPtrList<device_status> *);
};

#endif //__FRAME_INTERPRETER_H__
