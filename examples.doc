/*!
	\page page-examples BTouch examples

	\section btouch-code Modifying the BTouch code
	The examples below demostrate how to modify the source code of BTouch in order to add
	new functionalities or change the default behaviour. The examples can be included in the BTouch
	executable by running qmake as:
	\code
	qmake CONFIG+=examples
	\endcode

	The available examples are:
	- \ref page-example-pdf
	- \ref page-example-screensaver
	- \ref page-example-message

	\section no-btouch-code Without modifying the BTouch code
	- \ref page-icons
	- \ref page-ext-openserver
*/


/*!
	\page page-example-pdf The pdf viewer example

	We want to add a new subsection of the multimedia section to navigate
	a mounted file system (USB or SD) and display the contained PDF files.

	LICENSE NOTE: this example uses the Poppler library, which is GPL, hence
	the resulting binary must be redistributed under GPL terms.

	To compile the example you need to recompile the Poppler library: detailed
	instructions are in \c examples/pdf/README.txt; after compiling the example,
	set \c BUILD_PDF to \c yes in \c examples.pri.

	First, we need a page with a standard layout (navigation bar on the left, display
	area on the right):
	\dontinclude pdfpage.cpp
	\skip PdfPage::PdfPage(
	\until }

	displayPdf() is called by the file system navigation page to load and display
	a PDF file.
	\skip PdfPage::displayPdf(
	\until }

	displayPage() renders the specified page into a QImage large as the display area
	and displays it into the page content.
	\skip PdfPage::displayPage(
	\until }

	scrollDown() scrolls down the displayed page; when at the bottom of the page,
	it moves to the next page.
	\skip PdfPage::scrollDown(
	\until }
	\until }
	\until }

	The new configuration node does not need any additional parameters; we only need to
	choose a non-conflicting id for the new item; the \c cid is chosen to use the
	existing USB icon; any \c cid defined in \c skin.xml will work:
	\verbatim
	  <item>
	<square>0</square>
	<id>55556</id>
	<cid>16002</cid>
	<itemID>5745934</itemID>
	<descr>PDF</descr>
	  </item>
	\endverbatim

	The configuration item is parsed in the \ref Multimedia section page;
	first we define a new page id:
	\dontinclude multimedia.cpp
	\skip #ifdef BUILD_EXAMPLES
	\until #endif

	that is used in the MultimediaSectionPage::loadItems() method:
	\skip case PAGE_PDF:
	\until }
	\until }
	this example only browses an USB file system; use MOUNT_SD in the code
	above to browse an SD card.

	There are some other parts that need to be modified; the PDF type must be
	defined in \c generic_functions.h
	\dontinclude generic_functions.h
	\skip #ifdef BUILD_EXAMPLES
	\until #endif

	and \c generic_functions.cpp must be modified accordingly:
	\dontinclude generic_functions.cpp
	\skip const char *image_files
	\until #endif

	to add PDF file handling in getFileExtensions()
	\skip #ifdef BUILD_EXAMPLES
	\until #endif

	and in getFileFilter()
	\skip #ifdef BUILD_EXAMPLES
	\until #endif

	The last class that needs changes is MultimediaFileListPage; first we need
	to add the icon for PDF files to the icon list:
	\dontinclude multimedia_filelist.cpp
	\skip #ifdef PDF_EXAMPLE
	\skip #endif
	\skip #ifdef PDF_EXAMPLE
	\until #endif

	then we instantiate the PDF display page and set up signals so the file list
	is shown again when the PDF page is closed
	\skip #ifdef PDF_EXAMPLE
	\until #endif

	we add a new case for PDF files in MultimediaFileListPage::fileType()
	\skip #ifdef PDF_EXAMPLE
	\until #endif

	and finally we emit the displayPdf() signal when a PDF file is clicked (the signal
	is connected to the displayPdf() slot of PdfPage.
	\skip #ifdef PDF_EXAMPLE
	\until #endif
*/

/*!
	\page page-example-screensaver The logo screeensaver example

	We want to add a screensaver that shows a bouncing myhome logo.

	The first thing to do is subclass the abstract class ScreenSaver.
	As described in the documentation of the class, we have to reimplement the
	ScreenSaver::type() and ScreenSaver::refresh() methods.

	To show a MyHome logo moving on the screen, we redefine
	the constructor to get and save the image from the SkinManager:
	\dontinclude logoscreensaver.cpp
	\skip LogoScreenSaver::LogoScreenSaver()
	\until }

	Now we have to place the logo on the screen. Because we have to re-place
	the image every time that the screensaver starts, we redefine the
	ScreenSaver::start() method:
	\skip LogoScreenSaver::start
	\until }

	Note that the LogoScreenSaver class explicitly calls the Window::showWindow()
	method. This is required because some screensavers (like the ScreenSaverLine)
	don't show a window but instead draws over another window.

	The positioning is done by the method initLogoRect():
	\skip LogoScreenSaver::initLogoRect
	\until }

	The paintEvent() method, implicitly called by Qt, draws the
	logo using its current position:

	\skip LogoScreenSaver::paintEvent
	\until }

	Now, we have to change the current position of the logo, redefining the
	ScreenSaver::refresh() method:
	\skip LogoScreenSaver::refresh
	\until }

	The next step is to assign a proper type to our screensaver, adding the type
	to the ScreenSaver::Type enumeration and reimplementing the type() method:
	\skip LogoScreenSaver::type
	\until }

	The only thing left is to allow the user to choose the logo screensaver.
	We do that by adding a new CheckableBanner in the ScreenSaverPage
	constructor, associating it with the ScreenSaver::Type just added
	\dontinclude screensaverpage.cpp
	\skip #ifdef BUILD_EXAMPLES
	\until #endif
*/

/*!
	\page page-example-message The TCP banners example

	We want to add a new section containing two custom banners which are able
	to comunicate their state to a server via TCP.

	First of all we will subclass a couple of different banners, then we will 
	arrange them into a custom BannerPage.

	Just for semplicity we have choosen to subclass the AdjustDimmer and the
	BannStates classes.

	In both cases in the constructor we initialize the banner and connect the specific signals
	it emits with the appropriate slots.
	\dontinclude tcpdimmer.cpp
	\skip TcpDimmer::TcpDimmer
	\until }

	\dontinclude tcpstatebanner.cpp
	\skip TcpStateBanner::TcpStateBanner
	\until }

	Those slots generate a message describing the actual state of the banner and call
	the method to send data via TCP. The method simply enstabilish the connection to the
	server and sends the data.
	\skip TcpStateBanner::sendMessage
	\until }

	Now that we have created our custom banners, we can create the page that will contain them.
	We want to arrange the banners into a single column, which is the default on the
	TouchScreen 3.5", but not on the 10" one.

	We subclass the BannerPage class, and in the constructor, we create a new
	BannerContent, setting the number of columns to 1.
	To make the banners centered on the page we have to create a container that layouts the
	banner content between to stretches.
	After that, it remains only to call the BannerPage::buildPage() method which layouts
	all the components in the right way.
	The last step, is to instantiate our custom banners and add them to the content.
	\dontinclude tcpbannerpage.cpp
	\skip TcpBannerPage::TcpBannerPage(QWidget *parent)
	\until }

	Now we want our new page presented on the homepage as a section.
	We have to the make the page return its section id:
	\skip int TcpBannerPage::sectionId() const
	\until } 

	The new configuration node does not need any additional parameters; we only need to
	choose a non-conflicting id for the new item:
	\verbatim
<item>
	<square>0</square>
	<id>55555</id>
	<cid>55555</cid>
	<itemID>99</itemID>
	<lnk_pageID>100</lnk_pageID>
</item>
	\endverbatim
*/

/*!
	\page page-icons Change icons
	This example shows how to modify the icons for an item.

	While we show the case for a simple light actuator, the procedure is
	similar for all item types and icons.

	Each item defined in the configuration file (\c conf.xml) is associated to a \c cid
	pointing to an item in \c skin.xml. To find the item in \c conf.xml file, we can search for the
	description of the item or for the \c id, that identifies the type of it.

	In our case, the simple light has \c id 2003. Be aware that if there is
	more than one simple light in the system, there will be multiple items with \c id 2003: in
	this case you have to distinguish them by the description.

	The item is something like this:
	\verbatim
	<item>
		<square>1</square>
		<id>2003</id>
		<cid>2003</cid>
		<itemID>1673</itemID>
		<descr>Living Room Light</descr>
		<where>14</where>
		<pul>0</pul>
	</item>
	\endverbatim
	Now that we found the item, we note that the \c cid is 2003. We can
	search the \c skin.xml file to find the item, that should be something like:
	\verbatim
	<item>
		<!-- simple light -->
		<cid>2003</cid>
		<img_off>illuminazione/off.png</img_off>
		<img_on>illuminazione/on.png</img_on>
		<img_actuator_state>illuminazione/imglamp.png</img_actuator_state>
	</item>
	\endverbatim

	We have two choices:
	- modify directly the images under each tagname
	- clone the item, in order to preserv the aspect of other simple lights.

	In the latter case we have to choose another \c cid, that must to be unique in
	the \c skin.xml file.

	Finally we can change the configuration file, modifying the \c cid tag for
	our item and adding the correspondent item to the \c skin.xml.

	That's all!
*/

/*!
	\page page-ext-openserver Connect to an external openserver
	This example shows how to send commands to an external openserver.

	While most of the time the BTouch only communicates with the openserver
	running on the touchscreen itself, it supports connecting to multiple openserver
	instances running on different hardware devices.  Even if this
	has been implemented for most \ref device subclasses, only some of the sections
	support this at the configuration level: \ref Lighting, \ref Automation,
	\ref AirConditioning, \ref Scenarios.

	Controlling an external openserver requires two configuration steps: first the
	openserver needs to be defined in the global configuration section, then the single
	items must be configured to use the openserver.

	The global list of openservers is defined in the \c setup/openserver node:
	\verbatim
	<?xml version='1.0' encoding='utf-8'?>
	<configuratore>
		<!-- ... -->
		<setup>
			<openserver>
				<item>
					<id>1</id>
					<address>192.168.42.42</address>
					<port>7777</port>
				</item>
				<item>
					<!-- ... -->
				</item>
				<!-- ... -->
			</openserver>
			<!-- ... -->
	\endverbatim

	Apart from the address/port pair, each openserver is identified by an unique \c id.
	If the \c id 0 is not defined explicitly, it's defined to be the address of the openserver
	running on the touchscreen itself.  Defining the openserver entry with \c id 0 will
	change the default openserver used by the BTouch.

	To change the openserved used by a graphic item (ex. a \ref banner), simply add
	an \c \<openserver_id> node at the same level of the node defining the device address.
	All graphic items that do not override the openserver will use the one with \c id 0.

	For example, for a 100-level dimmer:
	\verbatim
	<item>
		<square>1</square>
		<id>2001</id>
		<cid>2001</cid>
		<itemID>36</itemID>
		<descr>Dimmer 100 22</descr>
		<where>22</where>
		<openserver_id>1</openserver_id>
		<softstart>2</softstart>
		<softstop>2</softstop>
		<pul>0</pul>
	</item>
	\endverbatim

	At the moment the only exception to this rule is the air conditioning split: since it
	uses two separate devices (split and temperature probe) which have separate addresses and
	can be on separate openserver, \c \<openserver_id> is used for the split and
	\c \<openserver_id_probe> for the temperature probe.
*/
